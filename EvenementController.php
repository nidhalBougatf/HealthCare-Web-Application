<?php

namespace MyApp\UserBundle\Controller;

use MyApp\UserBundle\Entity\Evenement;
use MyApp\UserBundle\Form\EvenementType;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\HttpFoundation\File\UploadedFile;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Serializer\Normalizer\ObjectNormalizer;
use Symfony\Component\Serializer\Serializer;
use Symfony\Component\Validator\Constraints\DateTime;

class EvenementController extends Controller
{
    public function ajouterEvenementAction(Request $req)
    {
        $evenement = new Evenement();
        $form=$this->createForm(EvenementType::class,$evenement);
        $form->handleRequest($req);
        if($form->isValid())
        {
            $em=$this->getDoctrine()->getManager();
            $em->persist($evenement);
            $em->flush();
           // return $this->redirectToRoute('_afficher');
        }
        return $this->render('MyAppUserBundle:Evenement:ajouter_evenement.html.twig', array('form'=>$form->createView()
            // ...
        ));
    }

    public function afficherEvenementAction()
    {
        $em=$this->getDoctrine()->getManager();
        $evenements=$em->getRepository("MyAppUserBundle:Evenement")->findAll();
        return $this->render('MyAppUserBundle:Evenement:afficher_evenement.html.twig', array("evenements"=>$evenements
            // ...
        ));
    }
    public function DeleteEvenementAction(Request $req)
    {
        if($req->isXmlHttpRequest())
        {
            //ajouter deux champs dans formulaire les setter avec les valeurs de start et end
            $em=$this->getDoctrine()->getManager();
            $evenement = $em->getRepository("MyAppUserBundle:Evenement")->find($req->get('id'));
            $evenement->setDateDebutstr($req->get('start'));
             $evenement->setDateFinstr($req->get('end'));
            $evenement->setDateDebut(new \DateTime($evenement->getDateDebutstr()));
            $evenement->setDateFin(new \DateTime($evenement->getDateFinstr()));
            $em->persist($evenement);
            $em->flush();
            return $this->redirectToRoute('afficher_evenement');
          /*  $em=$this->getDoctrine()->getManager();

            $modele=$em->getRepository("MyAppUserBundle:Evenement")->find($req->get('titre'));
            $em->remove($modele);
            $em->flush();
            return $this->redirectToRoute('afficher_evenement');
            //  $serializer = new Serializer(array(new ObjectNormalizer()));

            //     $data = $serializer->normalize($req->get('titre'));
            /* $data2 = $serializer->normalize($req->get('titre2'));
         $debut= new \DateTime($req->get('titre'));
         $fin= new \DateTime($req->get('titre2'));
         $evenement->setDateDebut($debut);
         $evenement->setDateFin($fin);*/
            //   return new JsonResponse($data);


        }

    }
    public function MapAction()
    {
        $latitude='36.898392';
        $longitude='10.1875433';

        return $this->render('MyAppUserBundle:Evenement:calendrierTest.html.twig', array('latidute'=>$latitude,'longitude'=>$longitude
            // ...
        ));
    }
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }
    public function  calendrierTestAction(Request $req)
    {

        if($req->getMethod()=="POST")
        {
            if($req->get('delete'))
            {
                $em=$this->getDoctrine()->getManager();
                $modele=$em->getRepository("MyAppUserBundle:Evenement")->find($req->get('id'));
                $em->remove($modele);
                $em->flush();
                return $this->redirectToRoute('calendrier_test');

            }
            if($req->get('id')) {
                $em = $this->getDoctrine()->getManager();
                $evenement = $em->getRepository("MyAppUserBundle:Evenement")->find($req->get('id'));
                if($req->get('start')) {
                    $evenement->setDateDebutstr($req->get('start'));
                    $evenement->setDateFinstr($req->get('end'));
                    $evenement->setDateDebut(new \DateTime($evenement->getDateDebutstr()));
                    $evenement->setDateFin(new \DateTime($evenement->getDateFinstr()));
                    $em->persist($evenement);
                    $em->flush();
                    return $this->redirectToRoute('calendrier_test');
                }
                $evenement->setLatitude($req->get('lat'));
                $evenement->setLongitude($req->get('lng'));

                $evenement->setTitre($req->get('title'));
                $evenement->setDescription($req->get('description'));
                $evenement->setContact($req->get('contact'));
                $evenement->setAffiche($req->get('affiche'));
                $evenement->setLieu($req->get('lieu'));
                $evenement->setSommite($req->get('sommite'));
                $evenement->setTypeE($req->get('type'));
                $evenement->setFrais($req->get('frais'));
                $evenement->setColor($req->get('color'));
                $em->persist($evenement);
                $em->flush();
                return $this->redirectToRoute('calendrier_test');

            }
        }

        $evenement = new Evenement();
        $form=$this->createForm(EvenementType::class,$evenement);
        $form->handleRequest($req);

        //formulaire modif
        $form1=$this->createForm(EvenementType::class,$evenement);
        $form1->handleRequest($req);

        $em=$this->getDoctrine()->getManager();
        $evenements=$em->getRepository("MyAppUserBundle:Evenement")->findAll();
        if($req->isXmlHttpRequest())
        {
            $em=$this->getDoctrine()->getManager();

            $modele=$em->getRepository("MyAppUserBundle:Evenement")->find($req->get('titre'));
            $em->remove($modele);
            $em->flush();
            return $this->redirectToRoute('afficher_evenement');
            //  $serializer = new Serializer(array(new ObjectNormalizer()));

            //     $data = $serializer->normalize($req->get('titre'));
            /* $data2 = $serializer->normalize($req->get('titre2'));
         $debut= new \DateTime($req->get('titre'));
         $fin= new \DateTime($req->get('titre2'));
         $evenement->setDateDebut($debut);
         $evenement->setDateFin($fin);*/
            //   return new JsonResponse($data);


        }
        if($form->isValid())
        {

            $em=$this->getDoctrine()->getManager();
            /** @var UploadedFile $fileImage */
            $fileImage = $evenement->getAffiche();

            $fileName2 = $this->generateUniqueFileName().'.'.$fileImage->guessExtension();

            $fileImage->move(
                $this->getParameter('image_directory'),
                $fileName2
            );
            $evenement->setAffiche($fileName2);
            $evenement->setDateDebut(new \DateTime($evenement->getDateDebutstr()));
            $evenement->setDateFin(new \DateTime($evenement->getDateFinstr()));
            /*    $e=new DateTime($req->get('dateDebutstr'));
                $evenement->setDateDebut($e);*/
            ///voir avc xmlhttprequest
            $em->persist($evenement);
            $em->flush();

            return $this->redirectToRoute('calendrier_test');
        }
        // $data=$req->request->get('s');
        //  $data = $req->query->get('data');
        // $z=$req->get('date');
        //date_default_timezone_set('Australia/Melbourne');


        /*$d = $req->request->get('d');

        if($req->request->get('d')!=null)
        {
            $d = $req->request->get('d');

            die($d);

        }*/
        /* if($req->isXmlHttpRequest())
         {
             echo 'Ajax Call';
             $d=$req->get('d');

             return new JsonResponse($d);
         }*/
        /*  if($form->isValid())
          {
              $em=$this->getDoctrine()->getManager();
              $em->persist($evenement);
              $em->flush();
              return $this->redirectToRoute('modifier_evenement');
              // return $this->redirectToRoute('_afficher');
          }*/
        return $this->render('MyAppUserBundle:Evenement:calendrierTest.html.twig', array('form'=>$form->createView(),"evenements"=>$evenements
            // ...
        ));

    }
    public function calendrierEvenementAction(Request $req)
    {
        if($req->getMethod()=="POST")
        {
            if($req->get('delete'))
            {
                $em=$this->getDoctrine()->getManager();
                $modele=$em->getRepository("MyAppUserBundle:Evenement")->find($req->get('id'));
                $em->remove($modele);
                $em->flush();
                return $this->redirectToRoute('calendrier_evenement');

            }
            if($req->get('id')) {
                $em = $this->getDoctrine()->getManager();
                $evenement = $em->getRepository("MyAppUserBundle:Evenement")->find($req->get('id'));
                     if($req->get('start')) {
                     $evenement->setDateDebutstr($req->get('start'));
                     $evenement->setDateFinstr($req->get('end'));
                     $evenement->setDateDebut(new \DateTime($evenement->getDateDebutstr()));
                     $evenement->setDateFin(new \DateTime($evenement->getDateFinstr()));
                     $em->persist($evenement);
                     $em->flush();
                      return $this->redirectToRoute('calendrier_evenement');
                     }
                $evenement->setTitre($req->get('title'));
                $evenement->setDescription($req->get('description'));
                $evenement->setContact($req->get('contact'));
                $evenement->setAffiche($req->get('affiche'));
                $evenement->setLieu($req->get('lieu'));
                $evenement->setSommite($req->get('sommite'));
                $evenement->setTypeE($req->get('type'));
                $evenement->setFrais($req->get('frais'));
                $evenement->setColor($req->get('color'));
                $em->persist($evenement);
                $em->flush();
                return $this->redirectToRoute('calendrier_evenement');

            }
        }

        $evenement = new Evenement();
        $form=$this->createForm(EvenementType::class,$evenement);
        $form->handleRequest($req);

        //formulaire modif
        $form1=$this->createForm(EvenementType::class,$evenement);
        $form1->handleRequest($req);

        $em=$this->getDoctrine()->getManager();
        $evenements=$em->getRepository("MyAppUserBundle:Evenement")->findAll();
        if($req->isXmlHttpRequest())
        {
            $em=$this->getDoctrine()->getManager();

            $modele=$em->getRepository("MyAppUserBundle:Evenement")->find($req->get('titre'));
            $em->remove($modele);
            $em->flush();
            return $this->redirectToRoute('afficher_evenement');
         //  $serializer = new Serializer(array(new ObjectNormalizer()));

           //     $data = $serializer->normalize($req->get('titre'));
               /* $data2 = $serializer->normalize($req->get('titre2'));
            $debut= new \DateTime($req->get('titre'));
            $fin= new \DateTime($req->get('titre2'));
            $evenement->setDateDebut($debut);
            $evenement->setDateFin($fin);*/
             //   return new JsonResponse($data);


        }
        if($form->isValid())
        {

            $em=$this->getDoctrine()->getManager();
            $evenement->setDateDebut(new \DateTime($evenement->getDateDebutstr()));
            $evenement->setDateFin(new \DateTime($evenement->getDateFinstr()));
        /*    $e=new DateTime($req->get('dateDebutstr'));
            $evenement->setDateDebut($e);*/
            ///voir avc xmlhttprequest
            $em->persist($evenement);
            $em->flush();

            return $this->redirectToRoute('calendrier_evenement');
        }
        // $data=$req->request->get('s');
        //  $data = $req->query->get('data');
        // $z=$req->get('date');
        //date_default_timezone_set('Australia/Melbourne');


        /*$d = $req->request->get('d');

        if($req->request->get('d')!=null)
        {
            $d = $req->request->get('d');

            die($d);

        }*/
       /* if($req->isXmlHttpRequest())
        {
            echo 'Ajax Call';
            $d=$req->get('d');

            return new JsonResponse($d);
        }*/
      /*  if($form->isValid())
        {
            $em=$this->getDoctrine()->getManager();
            $em->persist($evenement);
            $em->flush();
            return $this->redirectToRoute('modifier_evenement');
            // return $this->redirectToRoute('_afficher');
        }*/



        return $this->render('MyAppUserBundle:Evenement:calendrier_evenement.html.twig', array('form'=>$form->createView(),"evenements"=>$evenements,'form1'=>$form1
            // ...
        ));
    }

}
